import numpy as nm
import matplotlib.pyplot as mtp
import pandas as pd

data_set=pd.read_csv('wine.csv')
print(data_set)

x=data_set.iloc[:,1:].values
y=data_set.iloc[:,0].values
print(x)
print(y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(x, y, test_size=0.2,random_state=0)

from sklearn.preprocessing import StandardScaler
st_x=StandardScaler()
x_train=st_x.fit_transform(x_train)
x_test=st_x.transform(x_test)

from sklearn.decomposition import PCA
Pca=PCA(n_components=2)
x_train=Pca.fit_transform(x_train)
x_test=Pca.transform(x_test)

from sklearn.linear_model import LogisticRegression as LR
classifier=LR(random_state=0)
classifier.fit(x_train,y_train)

y_pred=classifier.predict(x_test)
print(y_pred)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)

from matplotlib.colors import ListedColormap
x_set,y_set=x_train,y_train
x1,x2=nm.meshgrid(
    nm.arange(start=x_set[:,0].min()-1,stop=x_set[:,0].max()+1,step=0.01),
    nm.arange(start=x_set[:,1].min()-1,stop=x_set[:,1].max()+1,step=0.01))
mtp.contourf(x1,x2,classifier.predict(nm.array([x1.ravel(),x2.ravel()]).T).reshape(x1.shape),alpha=0.75,cmap=ListedColormap(('green','purple','grey')))
mtp.xlim(x1.min(),x1.max())
mtp.ylim(x2.min(),x2.max())            
for i,j in enumerate(nm.unique(y_set)):
    mtp.scatter(x_set[y_set==j,0],x_set[y_set==j,1],
                c=ListedColormap(('green','purple','grey'))(i),label=j)
mtp.title('Logistic Regression for Training set: ')   
mtp.xlabel ('PC_1') # for X_label   
mtp.ylabel ('PC_2') # for Y_label   
mtp.legend() # for showing legend      
mtp.show()

from matplotlib.colors import ListedColormap
x_set,y_set=x_test,y_test
x1,x2=nm.meshgrid(
    nm.arange(start=x_set[:,0].min()-1,stop=x_set[:,0].max()+1,step=0.01),
    nm.arange(start=x_set[:,1].min()-1,stop=x_set[:,1].max()+1,step=0.01))
mtp.contourf(x1,x2,classifier.predict(nm.array([x1.ravel(),x2.ravel()]).T).reshape(x1.shape),alpha=0.75,cmap=ListedColormap(('green','purple','grey')))
mtp.xlim(x1.min(),x1.max())
mtp.ylim(x2.min(),x2.max())            
for i,j in enumerate(nm.unique(y_set)):
    mtp.scatter(x_set[y_set==j,0],x_set[y_set==j,1],
                c=ListedColormap(('green','purple','grey'))(i),label=j)
mtp.title('Logistic Regression for Testing set: ')   
mtp.xlabel ('PC_1') # for X_label   
mtp.ylabel ('PC_2') # for Y_label   
mtp.legend() # for showing legend     
mtp.show()